type: edu
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/tool/ContextMenu.java
  visible: true
  text: |
    package carsharing.tool;

    public interface ContextMenu {
        void display();
        void readInput();
        void performAction(DBMTool dbmTool);
    }
  learner_created: true
- name: src/carsharing/tool/TerminateAction.java
  visible: true
  text: |
    package carsharing.tool;

    public class TerminateAction implements Action {
        @Override
        public void perform(DBMTool dbmTool) {
            dbmTool.terminate();
        }
    }
  learner_created: true
- name: src/carsharing/tool/DBMTool.java
  visible: true
  text: |
    package carsharing.tool;

    public class DBMTool implements Runnable {
        private ContextMenu contextMenu;
        private boolean shouldTerminate;

        public DBMTool(ContextMenu contextMenu) {
            this.contextMenu = contextMenu;
        }

        @Override
        public void run() {
            while (!shouldTerminate) {
                contextMenu.display();
                contextMenu.readInput();
                contextMenu.performAction(this);
            }
        }

        void switchContext(ContextMenu contextMenu) {
            this.contextMenu = contextMenu;
        }

        void terminate() {
            shouldTerminate = true;
        }
    }
  learner_created: true
- name: src/carsharing/tool/SwitchContextMenuAction.java
  visible: true
  text: |
    package carsharing.tool;

    public class SwitchContextMenuAction implements Action {
        private final ContextMenu nextContextMenu;

        public SwitchContextMenuAction(ContextMenu nextContextMenu) {
            this.nextContextMenu = nextContextMenu;
        }

        @Override
        public void perform(DBMTool dbmTool) {
            dbmTool.switchContext(nextContextMenu);
        }
    }
  learner_created: true
- name: src/carsharing/CompanyService.java
  visible: true
  text: |
    package carsharing;

    import java.util.List;

    public interface CompanyService {
        void add(String companyName);
        List<Company> getAll();
    }
  learner_created: true
- name: src/carsharing/CompanyServiceImpl.java
  visible: true
  text: |
    package carsharing;

    import carsharing.db.CompanyRepository;

    import java.sql.SQLException;
    import java.util.List;

    public class CompanyServiceImpl implements CompanyService {
        private final CompanyRepository companyRepository;

        public CompanyServiceImpl(CompanyRepository companyRepository) {
            this.companyRepository = companyRepository;
        }

        @Override
        public void add(String companyName) {
            try {
                companyRepository.add(companyName);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public List<Company> getAll() {
            try {
                return companyRepository.getAll();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/carsharing/db/Database.java
  visible: true
  text: |
    package carsharing.db;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class Database {
        private static final String JDBC_DRIVER = "org.h2.Driver";
        private static final String DB_URL = "jdbc:h2:./src/carsharing/db/";
        private static Database INSTANCE;
        private final String dbFileName;

        private Database(String dbFileName) {
            this.dbFileName = dbFileName;
        }

        public static Database getInstance(String dbFileName) {
            if (INSTANCE == null) {
                INSTANCE = new Database(dbFileName);
            }
            return INSTANCE;
        }

        public static Database getInstance() {
            return INSTANCE;
        }

        public void initialize() throws ClassNotFoundException {
            Class.forName(JDBC_DRIVER);
            try (Connection connection =
                         getConnection();
                 Statement statement = connection.createStatement()) {
                connection.setAutoCommit(true);
                final String COMPANY_DDL = "CREATE TABLE IF NOT EXISTS " +
                        "COMPANY(" +
                        "ID INTEGER PRIMARY KEY AUTO_INCREMENT, " +
                        "NAME VARCHAR(30) UNIQUE NOT NULL )";
                statement.executeUpdate(COMPANY_DDL);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        public Connection getConnection() throws SQLException {
            return DriverManager.getConnection(DB_URL + dbFileName);
        }
    }
  learner_created: true
- name: src/carsharing/tool/Action.java
  visible: true
  text: |
    package carsharing.tool;

    public interface Action {
        void perform(DBMTool dbmTool);
    }
  learner_created: true
- name: src/carsharing/tool/ContextMenuImpl.java
  visible: true
  text: |
    package carsharing.tool;

    import java.util.Map;
    import java.util.Scanner;

    public abstract class AbstractContextMenu {
        protected final String displayText;
        protected final Map<Integer, Action> actionMap;
        protected Action currentAction;

        public AbstractContextMenu(String displayText, Map<Integer, Action> actionMap) {
            this.displayText = displayText;
            this.actionMap = actionMap;
        }

        public void display() {
            System.out.println(displayText);
        }

        public void readInput() {
            Scanner scanner = new Scanner(System.in);
            final int actionCode = scanner.nextInt();
            currentAction = actionMap.get(actionCode);
        }

        public void performAction(DBMTool dbmTool) {
            currentAction.perform(dbmTool);
        }
    }
  learner_created: true
- name: src/carsharing/db/CompanyRepository.java
  visible: true
  text: |
    package carsharing.db;

    import carsharing.Company;

    import java.sql.SQLException;
    import java.util.List;

    public interface CompanyRepository {
        void add(String companyName) throws SQLException;
        List<Company> getAll() throws SQLException;
    }
  learner_created: true
- name: src/carsharing/Company.java
  visible: true
  text: |
    package carsharing;

    public class Company {
        private final int id;
        private final String name;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }
    }
  learner_created: true
- name: src/carsharing/tool/ListCompanyAction.java
  visible: true
  text: |
    package carsharing.tool;

    import carsharing.Company;
    import carsharing.CompanyService;

    import java.util.List;

    public class ListCompanyAction implements Action {
        private final CompanyService companyService;

        public ListCompanyAction(CompanyService companyService) {
            this.companyService = companyService;
        }

        @Override
        public void perform(DBMTool dbmTool) {
            final List<Company> companies = companyService.getAll();
            if (companies.isEmpty()) {
                System.out.println("The company list is empty!");
            } else {
                System.out.println("Company list:");
                for (int i = 1; i <= companies.size(); i++) {
                    Company company = companies.get(i - 1);
                    System.out.printf("%d. %s%n", i, company.getName());
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/carsharing/DependencyManager.java
  visible: true
  text: |
    package carsharing;

    import carsharing.db.CompanyRepository;
    import carsharing.db.JDBCCompanyRepository;
    import carsharing.tool.*;

    import java.util.HashMap;
    import java.util.Map;

    public class DependencyManager {
        private DBMTool dbmTool;
        private ContextMenu mainMenu;
        private ContextMenu managerMenu;
        private CompanyRepository companyRepository;
        private CompanyService companyService;

        public void wireDependencies() {
            companyRepository = JDBCCompanyRepository.getInstance();
            companyService = new CompanyServiceImpl(companyRepository);
            Action createCompanyAction = new CreateCompanyAction(companyService);
            Action listCompanyAction = new ListCompanyAction(companyService);
            final String mainMenuDisplayText = "1. Log in as a manager\n" +
                    "0. Exit";
            final Map<Integer, Action> mainMenuActionMap = new HashMap<>();
            mainMenu = new MainMenu(mainMenuDisplayText, mainMenuActionMap);

            Action backAction = new SwitchContextMenuAction(mainMenu);
            final Map<Integer, Action> managerMenuActionMap = new HashMap<>();
            managerMenuActionMap.put(1, listCompanyAction);
            managerMenuActionMap.put(2, createCompanyAction);
            managerMenuActionMap.put(0, backAction);

            final String managerMenuDisplayText = "1. Company list\n" +
                    "2. Create a company\n" +
                    "0. Back";
            managerMenu = new ManagerMenu(managerMenuDisplayText, managerMenuActionMap);
            Action managerLoginAction = new SwitchContextMenuAction(managerMenu);
            Action terminateAction = new TerminateAction();
            mainMenuActionMap.put(1, managerLoginAction);
            mainMenuActionMap.put(0, terminateAction);
            dbmTool = new DBMTool(mainMenu);
        }

        public DBMTool getDbmTool() {
            return dbmTool;
        }

        public ContextMenu getMainMenu() {
            return mainMenu;
        }

        public ContextMenu getManagerMenu() {
            return managerMenu;
        }

        public CompanyRepository getCompanyRepository() {
            return companyRepository;
        }

        public CompanyService getCompanyService() {
            return companyService;
        }
    }
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/tool/CreateCompanyAction.java
  visible: true
  text: |
    package carsharing.tool;

    import carsharing.CompanyService;

    import java.util.Scanner;

    public class CreateCompanyAction implements Action {
        private final CompanyService companyService;

        public CreateCompanyAction(CompanyService companyService) {
            this.companyService = companyService;
        }

        @Override
        public void perform(DBMTool dbmTool) {
            System.out.println("Enter the company name:");
            Scanner scanner = new Scanner(System.in);
            final String companyName = scanner.nextLine();
            companyService.add(companyName);
            System.out.println("The company was created!");
        }
    }
  learner_created: true
- name: src/carsharing/Car.java
  visible: true
  learner_created: true
- name: src/carsharing/db/JDBCCompanyRepository.java
  visible: true
  text: |
    package carsharing.db;

    import carsharing.Company;

    import java.sql.Connection;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;

    public class JDBCCompanyRepository implements CompanyRepository {
        private static final JDBCCompanyRepository INSTANCE = new JDBCCompanyRepository();
        private static final String INSERT_STATEMENT = "INSERT INTO COMPANY(NAME) VALUES (?)";
        private static final String QUERY_FIND_ALL = "SELECT * from COMPANY";
        private final Database database;

        private JDBCCompanyRepository() {
            database = Database.getInstance();
        }

        public static CompanyRepository getInstance() {
            return INSTANCE;
        }

        @Override
        public void add(String companyName) throws SQLException {
            try (Connection connection = database.getConnection();
                 final PreparedStatement statement = connection.prepareStatement(INSERT_STATEMENT)) {
                statement.setString(1, companyName);
                statement.executeUpdate();
            }
        }

        @Override
        public List<Company> getAll() throws SQLException {
            List<Company> companies = new ArrayList<>();
            try (Connection connection = database.getConnection();
                 final PreparedStatement statement = connection.prepareStatement(QUERY_FIND_ALL);
                 final ResultSet resultSet = statement.executeQuery();
            ) {
                while (resultSet.next()) {
                    int id = resultSet.getInt("ID");
                    String name = resultSet.getString("NAME");
                    companies.add(new Company(id, name));
                }
            }
            return companies;
        }
    }
  learner_created: true
- name: src/carsharing/tool/ListCarAction.java
  visible: true
  learner_created: true
- name: src/carsharing/tool/CreateCarAction.java
  visible: true
  learner_created: true
- name: src/carsharing/tool/ChooseCompanyAction.java
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11503#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 22 Jul 2022 04:43:42 UTC
record: 3
